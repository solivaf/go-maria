// Code generated by MockGen. DO NOT EDIT.
// Source: release.go

// Package mock_release is a generated GoMock package.
package mock_release

import (
	gomock "github.com/golang/mock/gomock"
	cli_v2 "gopkg.in/urfave/cli.v2"
	reflect "reflect"
)

// MockRelease is a mock of Release interface
type MockRelease struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseMockRecorder
}

// MockReleaseMockRecorder is the mock recorder for MockRelease
type MockReleaseMockRecorder struct {
	mock *MockRelease
}

// NewMockRelease creates a new mock instance
func NewMockRelease(ctrl *gomock.Controller) *MockRelease {
	mock := &MockRelease{ctrl: ctrl}
	mock.recorder = &MockReleaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRelease) EXPECT() *MockReleaseMockRecorder {
	return m.recorder
}

// SkipPush mocks base method
func (m *MockRelease) SkipPush(context *cli_v2.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipPush", context)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipPush indicates an expected call of SkipPush
func (mr *MockReleaseMockRecorder) SkipPush(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipPush", reflect.TypeOf((*MockRelease)(nil).SkipPush), context)
}

// ReleaseMajor mocks base method
func (m *MockRelease) ReleaseMajor(push bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseMajor", push)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseMajor indicates an expected call of ReleaseMajor
func (mr *MockReleaseMockRecorder) ReleaseMajor(push interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMajor", reflect.TypeOf((*MockRelease)(nil).ReleaseMajor), push)
}

// ReleaseMinor mocks base method
func (m *MockRelease) ReleaseMinor(push bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseMinor", push)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseMinor indicates an expected call of ReleaseMinor
func (mr *MockReleaseMockRecorder) ReleaseMinor(push interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMinor", reflect.TypeOf((*MockRelease)(nil).ReleaseMinor), push)
}

// ReleasePatch mocks base method
func (m *MockRelease) ReleasePatch(push bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePatch", push)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePatch indicates an expected call of ReleasePatch
func (mr *MockReleaseMockRecorder) ReleasePatch(push interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePatch", reflect.TypeOf((*MockRelease)(nil).ReleasePatch), push)
}
